// Localization content for different languages
const localization = {
  en: {
    // English content would go here
  },
  ko: {
    // Korean translations for the content
    QWEN: `# AI 프롬프트 엔지니어링 최고의 방법

## 개요

이 가이드는 ChatGPT, Claude 및 기타 LLM과 같은 AI 시스템에서 최고의 결과를 얻기 위한 효과적인 AI 프롬프트 엔지니어링 기술에 중점을 둡니다. 잘 설계된 프롬프트는 고품질, 정확하고 관련성 있는 출력을 생성하는 데 필수적입니다.

## 효과적인 프롬프트의 핵심 원칙

### 1. 명확성과 구체성
- AI가 수행해야 할 작업을 명확하게 하세요
- 맥락과 구체적인 요구 사항을 포함하세요
- 명확하고 모호하지 않은 언어를 사용하세요

### 2. 구조와 형식
- 정보를 구성하기 위해 형식(제목, 목록, 글머리 기호)을 사용하세요
- 예상되는 출력 형식을 지정하세요
- 가능하면 예제를 포함하세요

### 3. 역할 할당
- AI에 특정 역할을 부여하세요 (예: "당신은 전문 소프트웨어 아키텍트입니다")
- 이는 응답 스타일과 심도를 안내하는 데 도움이 됩니다

## 일반적인 프롬프트 패턴

### 1. 지시 패턴
\`\`\`
[맥락] + [지시사항] + [출력 형식]
\`\`\`

예제:
\`\`\`
당신은 기술 문서 작성자입니다. Vite와 Tailwind CSS를 사용하여 React 프로젝트를 설정하는 방법을 설명하세요.
응답을 단계별 지침과 코드 예제로 형식화하세요.
\`\`\`

### 2. 추론 체인 패턴
\`\`\`
[문제] + [사고 과정] + [해결책]
\`\`\`

예제:
\`\`\`
이 수학 문제를 단계별로 풀어보세요:
반지름이 5cm인 원의 넓이를 계산하세요.
먼저 원 넓이 공식을 확인하세요...
\`\`\`

### 3. 소량 학습 (Few-Shot Learning)
원하는 입력-출력 패턴의 예제를 제공하세요:
\`\`\`
[예제 1 입력] -> [예제 1 출력]
[예제 2 입력] -> [예제 2 출력]
[새 입력] -> [AI 출력]
\`\`\`

## 고급 프롬프트 기법

### 1. 시스템 메시지 프라이밍
인터페이스에서 지원되는 경우 시스템 메시지를 사용하여 AI의 동작을 설정하세요:
\`\`\`
시스템: 보안, 성능 및 유지 관성을 중심으로 한 전문 코드 리뷰어입니다.
사용자: 이 JavaScript 코드를 검토하세요...
\`\`\`

### 2. 온도 및 창의성 제어
- 창의성 수준을 제어하기 위해 구체적인 지시 사용:
  - 낮은 창의성: "간결하고 사실적으로"
  - 높은 창의성: "여러 가지 창의적인 접근 방식을 탐색하세요"

### 3. 반복적 개선
복잡한 단일 프롬프트 대신 복잡한 작업을 순차적 프롬프트로 분할:
1. 개요 생성
2. 콘텐츠 확장
3. 검토 및 개선

## AI 프롬프트 엔지니어링의 실제 예제

### 예제 1: 코드 생성 프롬프트
\`\`\`
당신은 전문 React 개발자입니다. Tailwind CSS를 사용하여 반응형 탐색 컴포넌트를 만드세요.

요구 사항:
1. 왼쪽에 로고 포함
2. 가운데에 탐색 링크
3. 오른쪽에 사용자 프로필 드롭다운
4. 모바일 친화적인 햄버거 메뉴
5. 활성 상태 강조
6. 훅을 사용한 함수형 컴포넌트 사용

필요한 가져오기와 함께 JSX 코드만 반환하세요.
\`\`\`

### 예제 2: 콘텐츠 분석 프롬프트
\`\`\`
다음 기사의 톤, 핵심 테마 및 대상 독자를 분석하세요.
그런 다음 3문장 요약을 제공하세요.

기사: [여기에 기사 텍스트 삽입]

다음 형식으로 응답:
- 톤: [단일 단어]
- 핵심 테마: [쉼표로 구분된 목록]
- 대상 독자: [설명]
- 요약: [3문장 요약]
\`\`\`

### 예제 3: 창의적 글쓰기 프롬프트
\`\`\`
[작가]의 스타일로 [주제]에 대한 짧은 이야기(200-300단어)를 작성하세요.
[특정 요소]를 포함하고 [특정 요구 사항]으로 마무리하세요.

스타일 참고: [특정 스타일 지침]
\`\`\`

## 피해야 할 일반적인 함정

### 1. 모호성
- 하지 마세요: "프로그래밍에 대해 말해주세요"
- 이렇게 하세요: "React와 Vue.js의 차이점을 초보 웹 개발자를 위해 설명하세요"

### 2. 맥락 부족
- 하지 마세요: "이 오류를 고쳐주세요"
- 이렇게 하세요: "React 앱에서 사용자 데이터에 접근할 때 'TypeError: Cannot read property of undefined' 오류가 발생합니다. 구성 요소가 처음 로드될 때 오류가 발생합니다. 다음은 코드입니다: [코드 조각]"

### 3. 불명확한 형식 요구 사항
- 하지 마세요: "목록을 주세요"
- 이렇게 하세요: "JavaScript 오류 처리를 위한 5가지 모범 사례 숫자 목록을 만드세요"

## 테스트 및 최적화

### 1. A/B 테스트 프롬프트
최고의 결과를 생성하는 것을 확인하기 위해 여러 프롬프트 변형을 테스트하세요:
- 구체성 수준 테스트
- 다양한 역할 할당 실험
- 복잡성과 구조 변경

### 2. 프롬프트 라이브러리
재사용하고 필요에 따라 수정할 수 있도록 일반적인 작업에 대한 효과적인 프롬프트 라이브러리를 유지하세요.

### 3. 평가 기준
프롬프트 효과성 평가 기준 설정:
- 정보의 정확성
- 요청과의 관련성
- 응답의 완전성
- 가독성과 형식

## 결론

효과적인 프롬프트 엔지니어링은 연습을 통해 향상되는 기술입니다. 핵심은 목표를 명확하게 하고 AI 시스템과 명확하게 소통하는 것입니다. 기본 프롬프트로 시작하여 AI 시스템이 다양한 프롬프트 구조에 어떻게 반응하는지 익숙해질수록 더 고급 기법을 점진적으로 통합하세요.

다른 AI 모델은 동일한 프롬프트에 대해 다르게 반응할 수 있으므로, 한 시스템에서 잘 작동하는 것이 다른 시스템에서는 조정이 필요할 수 있다는 점을 기억하세요. 가장 중요한 것은 목표를 이해하고 AI 시스템에 명확하게 전달하는 것입니다.

## 추가 학습 자료

- 프롬프트 엔지니어링 연구 논문 연구
- 프롬프트 엔지니어링 커뮤니티 참여
- 다양한 접근 방식 실험 및 결과 문서화
- AI 기능의 새로운 발전 사항 업데이트 유지`,
    
    YAML_ALIGN_FIX: `# 프롬프트의 정밀도

## 과제

AI 시스템에서 작업할 때 입력의 형식은 출력의 품질에 상당한 영향을 미칠 수 있습니다. YAML 콘텐츠가 올바르게 해석되도록 특정 형식이 필요한 것처럼, 프롬프트는 AI가 요구 사항을 이해하도록 보장하기 위해 정밀한 형식이 필요합니다.

## 문제: 모호한 형식

이와 같은 모호한 프롬프트를 고려해 보세요:
\`\`\`
이 코드를 고쳐주세요:
function add(a, b) {
return a + b
}
\`\`\`

AI는 다음을 알지 못합니다:
- 구체적으로 어떤 변경이 필요한지
- 존재하는 프로그래밍 언어 제약
- 따를 스타일 가이드라인
- 예상 출력 형식

## 해결책: 구조화되고 정렬된 프롬프트

명확한 형식과 구체적인 요구 사항이 있는 프롬프트를 만드세요:

\`\`\`
당신은 전문 JavaScript 개발자입니다. ES6+ 표준에 따라 다음 함수를 개선하세요.

요구 사항:
1. 화살표 함수 구문 사용
2. 적절한 형식 및 들여쓰기 보장
3. JSDoc 주석 추가
4. 입력 유효성 검사 포함
5. 개선된 코드만 반환

현재 함수:
function add(a, b) {
return a + b
}
\`\`\`

## 프롬프트 구조의 주요 개선 사항

1. **명확한 역할 할당**: "당신은 전문 JavaScript 개발자입니다"
2. **구체적인 요구 사항**: 요구 사항의 번호 매기기 목록
3. **예상 형식**: "개선된 코드만 반환" 
4. **맥락**: 개선할 현재 코드

## 프롬프트 형식의 모범 사례

### 1. 구분 기호 사용
코드 블록에는 백틱 3개를 사용하고 섹션에는 명확한 제목을 사용합니다:
- AI가 콘텐츠의 다양한 유형을 구별하도록 도움
- 복잡한 요청의 구문 분석 향상
- 코드 형식 및 가독성 유지

### 2. 명시적 지시 사항
AI가 의도를 이해했다고 가정하지 마세요:
- 번호 또는 글머리 기호로 구체적 요구 사항 나열
- 제약과 지침 명시
- 출력 형식 명확히 정의

### 3. 맥락 정보
관련 배경 정보 제공:
- 코드/함수가 수행해야 할 작업
- 기술 제약 또는 요구 사항
- 다른 시스템과의 통합 지점

## 잘 구성된 프롬프트의 예

\`\`\`
시니어 소프트웨어 아키텍트로서 이 Python 함수를 SOLID 원칙을 따르도록 리팩토링하고 유지 관리성을 개선하세요:

1. 단일 책임 원칙 적용
2. 적절한 곳에 의존성 주입 사용
3. 적절한 오류 처리 추가
4. 타입 힌트 포함
5. 포괄적인 독스트링 작성
6. PEP 8 스타일 가이드 준수

현재 코드:
[코드 삽입]

주요 변경 사항을 설명하는 주석과 함께 리팩토링된 코드만 반환하세요.
\`\`\`

## 결론

적절한 형식이 있는 YAML이 올바르게 해석되도록 보장하는 것처럼, 정밀한 프롬프트 형식은 AI 시스템이 요청을 이해하고 효과적으로 실행하도록 보장합니다. 결과를 개선하려면 프롬프트의 구조, 명확성 및 구체성에 주의를 기울이세요.`,
    
    SOLUTION_SUMMARY: `# AI 지원 문제 해결: 구조화된 접근법

## 개요
이 문서는 소프트웨어 개발 과제와 같은 복잡한 기술 문제를 AI 시스템의 도움으로 해결하는 체계적인 접근법을 설명합니다.

## 문제 해결 프레임워크

### 1. 문제 식별 및 정의
**도전:**
- 문제는 여러 가지 잠재적 근본 원인이 있는 복잡한 것처럼 보일 수 있습니다
- 초기 증상은 실제 근본적인 문제를 가릴 수 있습니다
- 부적절한 초기 문제 정의는 비효과적인 해결책으로 이어집니다

**AI 지원 접근법:**
- AI를 사용하여 복잡한 문제를 더 작고 관리 가능한 구성 요소로 분해하세요
- AI에게 잠재적 원인에 대한 가설을 생성하도록 요청하세요
- 근본 원인을 식별하기 위한 진단 단계를 생성하도록 AI에게 요청하세요

**프롬프트 예제:**
\`\`\`
React 애플리케이션을 로드할 때 흰색 화면이 나타납니다. 콘솔에는 오류가 표시되지 않지만 UI 구성 요소가 렌더링되지 않습니다. 빌드는 성공적으로 완료됩니다. 이 문제를 일으킬 수 있는 원인은 무엇이며 어떤 진단 단계를 수행해야 합니까?
\`\`\`

### 2. 조사 및 정보 수집
**도전:**
- 필요한 정보는 여러 출처에 흩어질 수 있습니다
- 다른 출처는 상충되는 정보를 제공할 수 있습니다
- 정보를 조사하고 요약하는 데 시간이 소요됩니다

**AI 지원 접근법:**
- 여러 출처에서 정보를 빠르게 요약하도록 AI를 사용하세요
- AI에게 다른 접근 방식 또는 솔루션을 비교하도록 요청하세요
- AI에게 복잡한 개념을 단순화된 용어로 설명하도록 요청하세요

### 3. 솔루션 수립
**도전:**
- 여러 잠재적 솔루션이 존재할 수 있습니다
- 각 접근 방식의 장단점을 평가해야 합니다
- 구현 복잡성은 솔루션 간에 다릅니다

**AI 지원 접근법:**
- AI에게 다양한 솔루션 접근 방식을 생성하도록 요청하세요
- AI에게 각 접근 방식의 장단점을 분석하도록 요청하세요
- 특정 제약 조건에 따라 가장 적절한 솔루션을 제안하도록 AI에게 요청하세요

**프롬프트 예제:**
\`\`\`
대량의 JSON 데이터 렌더링으로 인해 성능 문제가 발생하는 React 애플리케이션에서 가상화, 페이징, 메모화 및 지연 로딩과 같은 솔루션을 평가하세요. 구현 복잡성, 장점, 단점 및 최적 사용 사례를 비교하세요.
\`\`\`

### 4. 구현 및 테스트
**도전:**
- 솔루션은 예상치 못한 부작용을 가질 수 있습니다
- 구현이 새로운 문제를 일으키지 않도록 확인해야 합니다
- 테스트는 처음에는 고려하지 않은 엣지 케이스를 드러날 수 있습니다

**AI 지원 접근법:**
- 테스트 케이스와 시나리오를 생성하도록 AI를 사용하세요
- AI에게 코드 구현을 검토하여 잠재적인 문제를 찾도록 요청하세요
- 추가 검증 단계를 제안하도록 AI에게 요청하세요

## AI를 통한 문제 해결의 일반적인 패턴

### 패턴 1: 근본 원인 분석
1. 증상 식별
2. AI에게 가능한 원인을 묻기
3. AI를 사용하여 원인을 확인하기 위한 테스트/검증 설계
4. 확인된 근본 원인을 기반으로 해결책 구현

### 패턴 2: 문제 해결 워크플로우
1. 문제와 맥락을 AI에 설명
2. AI에게 체계적인 문제 해결 워크플로우 생성 요청
3. 워크플로우를 따라 진행하고 AI에게 결과 보고
4. 중간 결과에 따라 접근 방식 조정

### 패턴 3: 솔루션 비교
1. AI를 통해 여러 솔루션 접근 방식 생성
2. 평가 기준 정의
3. AI에게 기준에 대해 솔루션 비교 요청
4. 비교를 기반으로 최적 솔루션 선택

## AI 지원 문제 해결 모범 사례

### 1. 제약 조건에 구체적으로 하기
AI 지원을 요청할 때 다음을 명확하게 하세요:
- 기술적 제약(기존 스택, 성능 요구 사항)
- 시간적 제약
- 자원 제약
- 조직 정책 또는 표준

### 2. AI 제안 검증
- 수동 검토를 통해 AI 생성 코드를 항상 검증
- 개발 환경에서 솔루션 테스트
- 권위 있는 자료와 비교하여 AI 정보 확인
- AI 제안의 잠재적 부정적 결과 고려

### 3. 반복 및 개선
- AI 상호작용을 반복적 대화로 처리
- 더 많은 것을 배우게 되면 요구 사항을 점진적으로 개선
- 초기 접근 방식이 실패할 경우 AI를 사용하여 대안 탐색

### 4. 프로세스 문서화
- 프롬프트 및 AI 응답 기록 유지
- 작동한 내용과 작동하지 않은 내용 기록
- 효과적인 문제 해결 패턴 라이브러리 구축

## 예제: 복잡한 빌드 문제 해결

**초기 문제:** 
"Tailwind CSS가 있는 Vite 빌드가 실패하며 '@tailwind 지시문을 해결할 수 없습니다' 오류가 표시됩니다."

**AI 지원 솔루션 프로세스:**
1. **문제를 명확하게 정의:** "Tailwind CSS 4.0과 함께 Vite에서 'Cannot resolve @tailwind directives' 오류"
2. **가능한 원인 조사:** 구성 문제 확인
3. **가설 생성:** 버전 불일치, 잘못된 플러그인 구성, 누락된 종속성
4. **각 가설 테스트:** 각 잠재적 원인을 체계적으로 확인
5. **구현 및 검증:** 솔루션 적용, 빌드 프로세스 테스트

**이 단계에 대한 효과적인 프롬프트:**
\`\`\`
Vite와 Tailwind CSS 4.0을 사용하고 있으며 postcss 오류: '@tailwind 지시문을 해결할 수 없습니다'가 발생합니다. vite.config.ts에는 postcss 구성이 포함된 CSS 플러그인이 있습니다. 원인은 무엇이며 Vite에서 Tailwind CSS 4.0을 올바르게 구성해야 합니까?
\`\`\`

## 결론

AI 시스템은 구조화된 문제 해결을 위한 강력한 도구이지만, 명확한 맥락을 제공하고 구체적인 질문을 하며 제안을 검증할 때 가장 잘 작동합니다. 이 프레임워크는 AI 지원으로 복잡한 기술 문제에 체계적으로 접근하는 방법을 보여주며, 솔루션이 효과적이고 적절하며 기존 시스템과 잘 통합되도록 보장합니다.`
  }
};

export default localization;